#!/bin/bash

# Download Progress Monitor
# Shows real-time download progress for the Devstral model

echo "=== Devstral Model Download Monitor ==="
echo "Monitoring model download progress..."
echo "Press Ctrl+C to stop monitoring"
echo ""

CONTAINER_NAME="llama-cpp-devstral"
MODEL_PATH="/models/devstral-q4_k_m.gguf"
EXPECTED_SIZE=16106127360  # ~15GB in bytes

# Function to format bytes
format_bytes() {
    local bytes=$1
    if [ $bytes -lt 1024 ]; then
        echo "${bytes}B"
    elif [ $bytes -lt 1048576 ]; then
        echo "$((bytes/1024))KB"
    elif [ $bytes -lt 1073741824 ]; then
        echo "$((bytes/1048576))MB"
    else
        echo "$((bytes/1073741824))GB"
    fi
}

# Function to calculate download speed
calculate_speed() {
    local current_size=$1
    local last_size=$2
    local time_diff=$3
    
    if [ $time_diff -gt 0 ]; then
        local speed=$(( (current_size - last_size) / time_diff ))
        format_bytes $speed
    else
        echo "0B"
    fi
}

# Function to estimate remaining time
estimate_remaining() {
    local current_size=$1
    local speed_bytes=$2
    
    if [ $speed_bytes -gt 0 ]; then
        local remaining_bytes=$((EXPECTED_SIZE - current_size))
        local remaining_seconds=$((remaining_bytes / speed_bytes))
        local hours=$((remaining_seconds / 3600))
        local minutes=$(((remaining_seconds % 3600) / 60))
        local seconds=$((remaining_seconds % 60))
        
        if [ $hours -gt 0 ]; then
            echo "${hours}h ${minutes}m ${seconds}s"
        elif [ $minutes -gt 0 ]; then
            echo "${minutes}m ${seconds}s"
        else
            echo "${seconds}s"
        fi
    else
        echo "calculating..."
    fi
}

# Check if container is running
if ! docker ps --format "table {{.Names}}" | grep -q "^$CONTAINER_NAME$"; then
    echo "‚ùå Container $CONTAINER_NAME is not running"
    echo "Start it with: ./start.sh"
    exit 1
fi

echo "Container: $CONTAINER_NAME"
echo "Model: $MODEL_PATH"
echo "Expected size: $(format_bytes $EXPECTED_SIZE)"
echo ""

# Initialize variables for speed calculation
last_size=0
last_time=$(date +%s)

while true; do
    current_time=$(date +%s)
    timestamp=$(date '+%H:%M:%S')
    
    # Check if final model exists
    if docker exec "$CONTAINER_NAME" test -f "$MODEL_PATH" 2>/dev/null; then
        final_size=$(docker exec "$CONTAINER_NAME" stat -c%s "$MODEL_PATH" 2>/dev/null || echo "0")
        final_formatted=$(format_bytes $final_size)
        echo "[$timestamp] ‚úÖ Download complete: $final_formatted"
        
        # Check if server is responding
        if docker exec "$CONTAINER_NAME" curl -sf http://localhost:11434/health > /dev/null 2>&1; then
            echo "[$timestamp] üöÄ Server is now responding - Ready for requests!"
            break
        else
            echo "[$timestamp] üîÑ Server starting up..."
        fi
    # Check if download is in progress
    elif docker exec "$CONTAINER_NAME" test -f "$MODEL_PATH.tmp" 2>/dev/null; then
        current_size=$(docker exec "$CONTAINER_NAME" stat -c%s "$MODEL_PATH.tmp" 2>/dev/null || echo "0")
        current_formatted=$(format_bytes $current_size)
        
        # Calculate progress percentage
        if [ $EXPECTED_SIZE -gt 0 ]; then
            percentage=$((current_size * 100 / EXPECTED_SIZE))
        else
            percentage=0
        fi
        
        # Calculate speed
        time_diff=$((current_time - last_time))
        if [ $time_diff -ge 10 ]; then  # Calculate speed every 10 seconds
            speed_bytes=$(( (current_size - last_size) / time_diff ))
            speed_formatted=$(format_bytes $speed_bytes)
            remaining_time=$(estimate_remaining $current_size $speed_bytes)
            
            echo "[$timestamp] ‚è¨ $current_formatted / $(format_bytes $EXPECTED_SIZE) ($percentage%) - Speed: ${speed_formatted}/s - ETA: $remaining_time"
            
            last_size=$current_size
            last_time=$current_time
        else
            echo "[$timestamp] ‚è¨ $current_formatted / $(format_bytes $EXPECTED_SIZE) ($percentage%)"
        fi
    else
        echo "[$timestamp] ‚è≥ Waiting for download to start..."
    fi
    
    sleep 5
done

echo ""
echo "üéâ Model download and server startup complete!"
echo "Access points:"
echo "  - OpenHands: http://localhost:3000"
echo "  - llama.cpp API: http://localhost:11434"
